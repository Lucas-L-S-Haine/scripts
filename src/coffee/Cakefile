fs = require "fs"
coffee = require "coffeescript"

compile = (coffeefile, jsfile) ->
    if fs.existsSync jsfile
        fs.unlinkSync jsfile

    input_file = fs.openSync coffeefile, "r"
    output_file = fs.openSync jsfile, "w"
    content = fs.readFileSync input_file, encoding: "UTF-8"

    result = coffee.compile content
        .split "\n"
        .filter (line) -> !/usr\/bin\/env coffee/.test line
    result.unshift "#!/usr/bin/env node"
    result = result.join "\n"

    fs.writeFileSync output_file, result, enconding: "UTF-8"
    fs.chmodSync jsfile, 0o755
    fs.closeSync input_file
    fs.closeSync output_file
    console.log "#{coffeefile} -> #{jsfile}"


option "-c", "--compile [PATH]", "directory or file to compile"
option "-o", "--output [PATH]", "directory of file path for compiled code"


task "list", "lists all files with .coffee extension",
    ->
        files = fs
            .readdirSync ".", encoding: "UTF-8"
            .filter (filename) -> /\.coffee$/.test filename
        console.log files


task "compile", "compiles all .coffee files and send to bin directory",
    (options) ->
        input_path = options.compile or "./"
        output_path = options.output or "../../bin/"
        input_is_dir = fs.statSync(input_path).isDirectory()
        try
            output_is_dir = fs.statSync(output_path).isDirectory()
        catch
            output_is_dir = input_is_dir
            fs.mkdirSync output_path, recursive: yes if output_is_dir

        if input_is_dir and not output_is_dir
            throw new Error "cannot compile source directory into a file"

        else if input_is_dir and output_is_dir
            input_files = fs.readdirSync input_path
                .filter (file) -> /.coffee$/.test file
            output_files = [(file.replace("_", "-").slice(0, -7) for file in input_files)...]
            for file, index in output_files
                input_file = input_files[index]
                output_file = [output_path, file]
                    .join "/"
                    .replace "//", "/"
                compile input_file, output_file

        else
            input_file = input_path
            output_file = options.output or input_file
                .replace "_", "-"
                .slice 0, -7
            output_file = [output_path, output_file]
                .join "/"
                .replace "//", "/" if output_is_dir

            compile input_file, output_file

        console.log "\x1b[32mCompiled successfully!\x1b[00m"
